// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//Dev
datasource db {
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

//Prod
//datasource db {
//  provider  = "postgresql"
//  url       = env("POSTGRES_PRISMA_URL")
//  directUrl = env("POSTGRES_URL_NON_POOLING")
//}

model User {
  id String @id @default(uuid())
  name String @unique
  displayName String
  email String @unique
  role String @default("common")
  description String?
  profilePicturePath String @default("/profile_ph.webp")
  password String
  createdAt DateTime @default(now())
  modifiedAt DateTime?

  //Relation
  tweets Tweet[] @relation("TweetOwner")
  comments Comment[] @relation("UserComments")

  likedTweets Tweet[] @relation("LikedTweets")
  likedComments Comment[] @relation("LikedComments")

  session Session? @relation("AuthSession")
}

model Comment {
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())
  modifiedAt DateTime?

  userId String @unique
  tweetId String @unique

  //Relations
  Owner User @relation("UserComments", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Tweet Tweet @relation("TweetComments", fields: [tweetId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  likes User[] @relation("LikedComments")
}

model Tweet {
  id String @id @default(uuid())
  description String
  retweets Int @default(0)
  isRetweet Boolean @default(false)
  createdAt DateTime @default(now())
  modifiedAt DateTime?

  userId String @unique

  //Relations
  Owner User @relation("TweetOwner", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  comments Comment[] @relation("TweetComments")
  likes User[] @relation("LikedTweets")
}

model Session {
  id String @id @default(uuid())
  userId String @unique
  
  token String @unique @default(uuid())

  user User @relation("AuthSession", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}