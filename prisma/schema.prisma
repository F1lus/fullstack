// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  //directUrl = env("POSTGRES_PRISMA_URL_NON_POOLING")
}

model User {
  id String @id @default(uuid())
  name String @unique
  displayName String
  email String @unique
  role String @default("common")
  description String?
  profilePicturePath String @default("/profile_ph.webp")
  password String
  createdAt DateTime @default(now())
  modifiedAt DateTime @updatedAt

  //Relation
  tweets Tweet[] @relation("TweetOwner")
  comments Comment[] @relation("UserComments")

  likedTweets Tweet[] @relation("LikedTweets")
  likedComments Comment[] @relation("LikedComments")

  session Session? @relation("AuthSession")
}

model Comment {
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())
  modifiedAt DateTime @updatedAt

  userId String
  tweetId String

  //Relations
  Owner User @relation("UserComments", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Tweet Tweet @relation("TweetComments", fields: [tweetId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  likes User[] @relation("LikedComments")
}

model Tweet {
  id String @id @default(uuid())
  description String
  createdAt DateTime @default(now())
  modifiedAt DateTime @updatedAt

  originalTweetId String?
  userId String

  //Relations
  Owner User @relation("TweetOwner", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  originalTweet Tweet? @relation("Retweet", fields: [originalTweetId], references: [id])
  retweets Tweet[] @relation("Retweet")

  comments Comment[] @relation("TweetComments")
  likes User[] @relation("LikedTweets")
}

model Session {
  id String @id @default(uuid())
  userId String @unique
  
  token String @unique @default(uuid())

  user User @relation("AuthSession", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}